#pragma kernel GenerateNoise
#include "/Includes/Noise.compute"

static const int numThreads = 8;

RWStructuredBuffer<float4> points;  // The points data to be read by our marching cubes script, x y and z represent the position, w represents the noise value
uint numPointsPerAxis;              // Number of points on each axis to sample
float bounds;                       // Total size of the bounding box in which the points are generated in (maybe change to float3?)
float3 center;						// Center at which our noise is generated from
float3 offset;						// Offset on the noise sampling
float spacing;						// Spacing between each noise sample
float3 worldSize;

StructuredBuffer<float3> offsets;
int octaves;                        // The number of loops the marching cubes runs on (higher octaves == finer detail)
float lacunarity;                   // Determines the change in frequency between noise octaves
float persistence;                  // Determines the length of the lacunarity offsets
float noiseScale;                   // Modifier for our noise sample points (think of the iterations modifier Shader Graph noise)
float noiseWeight;					// Weighting value added onto the final noise value generated
float floorOffset;					// Applies an offset to the y value of the noise position
float weightMultiplier;				
bool closeEdges;
float hardFloor;
float hardFloorWeight; //TODO: Modify this code for the cave gen concept

float4 params;

int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}


[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
		return;
	}

	float3 noiseSamplePoint = center + (id * spacing) - (bounds * 0.5);
	float noiseOffset = 0;
	float noiseValue = 0;

	// Initialise the variables for calculating the final noise value
	float frequency = noiseScale * 0.01f;
	float amplitude = 1;
	float weight = 1;

	for (int o = 0; o < octaves; o++)
	{
		float n = snoise((noiseSamplePoint + noiseOffset) * frequency + offsets[o] + offset);
		float v = 1 - abs(n);

		v = v * v;	
		v *= weight;

		weight = max(min(v * weightMultiplier, 1), 0);
		noiseValue += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}

	float finalNoiseValue = -(noiseSamplePoint.y + floorOffset) + noiseValue * noiseWeight + (noiseSamplePoint.y % params.x) * params.y;

	// if the noise value is below the floor, we scale the value accordingly
	if (noiseSamplePoint.y < hardFloor) {
		finalNoiseValue += hardFloorWeight;
	}

	if (closeEdges) {
		float3 edgeOffsets = abs(noiseSamplePoint * 2) - worldSize + spacing * 0.5f;
		float edgeWeight = saturate(sign(max(max(edgeOffsets.x, edgeOffsets.y), edgeOffsets.z)));
		finalNoiseValue = finalNoiseValue * (1 - edgeWeight) - 100 * edgeWeight;
	}

	int index = indexFromCoord(id.x,id.y,id.z);
	points[index] = float4(noiseSamplePoint, finalNoiseValue);
}