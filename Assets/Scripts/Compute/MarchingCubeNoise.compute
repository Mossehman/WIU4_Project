#pragma kernel GenerateNoise
#include "/Includes/SimplexNoise.compute"
#include "/Includes/Noise.compute"

static const int numThreads = 8;

RWStructuredBuffer<float4> points;  // The points data to be read by our marching cubes script, x y and z represent the position, w represents the noise value
int3 numPointsPerAxis;              // Number of points on each axis to sample
float3 bounds;                      // Total size of the bounding box in which the points are generated in (maybe change to float3?)
float3 center;						// Center at which our noise is generated from
float3 offset;						// Offset on the noise sampling
float3 spacing;						// Spacing between each noise sample
float3 worldSize;

struct SphereEditor {
	float3 position;
	float radius;
	float noiseModifier;
};

StructuredBuffer<SphereEditor> spheres;
int numSpheres;


StructuredBuffer<float3> offsets;
int octaves;                        // The number of loops the marching cubes runs on (higher octaves == finer detail)
float lacunarity;                   // Determines the change in frequency between noise octaves
float persistence;                  // Determines the length of the lacunarity offsets
float noiseScale;                   // Modifier for our noise sample points (think of the iterations modifier Shader Graph noise)
float noiseWeight;					// Weighting value added onto the final noise value generated
float floorOffset;					// Applies an offset to the y value of the noise position
float weightMultiplier;				
bool closeEdges;
float hardFloor;
float hardFloorWeight; //TODO: Modify this code for the cave gen concept

float4 params;

int indexFromCoord(uint x, uint y, uint z) { 
    return z * numPointsPerAxis.z * numPointsPerAxis.y + y * numPointsPerAxis.x + x;
}


[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise (int3 id : SV_DispatchThreadID)
{
	if (id.x >= numPointsPerAxis.x || id.y >= numPointsPerAxis.y || id.z >= numPointsPerAxis.z) {
		return;
	}

	float3 noiseSamplePoint = center + id * spacing - (bounds * 0.5f);
	float noiseValue = 0;

	// Initialise the variables for calculating the final noise value
	float frequency = noiseScale * 0.01f;
	float amplitude = 1;
	float weight = 1;

	for (int o = 0; o < octaves; o++)
	{
		float n = SimplexNoise3D((noiseSamplePoint + offset) * frequency + offsets[o]);
		float v = 1 - abs(n);

		v = v * v;	
		v *= weight;

		weight = max(min(v * weightMultiplier, 1), 0);
		noiseValue += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}

	float finalNoiseValue = -(noiseSamplePoint.y + floorOffset) + noiseValue * noiseWeight + (noiseSamplePoint.y % params.x) * params.y;

	for (int i = 0; i < numSpheres; i++)
	{
		if ((spheres[i].position.x - offset.x - noiseSamplePoint.x) * (spheres[i].position.x - offset.x - noiseSamplePoint.x) +
			(spheres[i].position.y - offset.y - noiseSamplePoint.y) * (spheres[i].position.y - offset.y - noiseSamplePoint.y) +
			(spheres[i].position.z - offset.z - noiseSamplePoint.z) * (spheres[i].position.z - offset.z - noiseSamplePoint.z) <= spheres[i].radius * spheres[i].radius)
			{
				finalNoiseValue += spheres[i].noiseModifier;
			}
	}

	// if the noise value is below the floor, we scale the value accordingly


	if (closeEdges) {
		float yEdgeOffset = abs(noiseSamplePoint.y * 2) - worldSize.y + spacing.y * 0.5f;
		float edgeWeight = saturate(sign(yEdgeOffset));
		finalNoiseValue = finalNoiseValue * (1 - edgeWeight) - 100 * edgeWeight;
	}

	float floorThreshold = hardFloor - max(2, ClassicNoise3D(noiseSamplePoint + offset) * 4);

	if (noiseSamplePoint.y + offset.y < floorThreshold) {
		float distanceFromHardFloorBottom = (floorThreshold - spacing.y * 6) - (noiseSamplePoint.y + offset.y);
		//if (distanceFromHardFloorBottom > floorThreshold - spacing.y * 6) {
		//	floorThreshold += 
		//}

		if (noiseSamplePoint.y + offset.y < floorThreshold - spacing.y * 6) {

			if (distanceFromHardFloorBottom <= spacing.y * 12) {
				finalNoiseValue += max(10, snoise(noiseSamplePoint + offset) * 20);
			}
			else
			{
				finalNoiseValue += min(-10, snoise(noiseSamplePoint + offset));
			}
		}	
		else {
			finalNoiseValue += hardFloorWeight + snoise(noiseSamplePoint + offset) * 3;
		}
	}

	if (noiseSamplePoint.y + offset.y < -20) {
		finalNoiseValue += hardFloorWeight + snoise(noiseSamplePoint + offset) * 4;
	}

	int index = indexFromCoord(id.x,id.y,id.z);
	points[index] = float4(noiseSamplePoint, finalNoiseValue);
}